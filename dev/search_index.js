var documenterSearchIndex = {"docs":
[{"location":"cksvar/#CKSVAR-models","page":"CKSVAR","title":"CKSVAR models","text":"","category":"section"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"ThresholdStability.jl includes tools to convert censored and kinked structural vector autoregressive (CKSVAR) models into TVAR models.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"Ox code to estimate CKSVAR models is available here.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"CKSVAR_to_TAR\nCKSVAR_to_companion\nCKSVAR_to_companionFD","category":"page"},{"location":"cksvar/#ThresholdStability.CKSVAR_to_TAR","page":"CKSVAR","title":"ThresholdStability.CKSVAR_to_TAR","text":"CKSVAR_to_TAR(C, Cstar, βtilde, nlags)\n\nReturns 1. a set of matrices corresponding to the CKSVAR model (with censored variable in levels) in TVAR form, and 2. a set encoding state-space constraints.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#ThresholdStability.CKSVAR_to_companion","page":"CKSVAR","title":"ThresholdStability.CKSVAR_to_companion","text":"CKSVAR_to_companion(C, Cstar, βtilde, nlags)\n\nConverts CKSVAR model (with censored variable in levels) into companion form.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#ThresholdStability.CKSVAR_to_companionFD","page":"CKSVAR","title":"ThresholdStability.CKSVAR_to_companionFD","text":"CKSVAR_to_companionFD(F, Fstar, βtilde, nlags; diff=true)\n\nConverts CKSVAR model estimated with the censored variable entering in first differences into companion form. The default setting diff=true returns the companion form with the censored variable entering in first differences. To retrieve the companion form with censored variable entering in levels, set diff=false.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#Construction-of-automata","page":"CKSVAR","title":"Construction of automata","text":"","category":"section"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"CKSVAR_to_TAR outputs a set of matrices generated in an order generated by the perms function (as well as a set encoding state space constraints.)","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"automaton_constructor provides a method to construct an automaton suitable for use with a CKSVAR model converted using CKSVAR_to_TAR, assuming this order. It is also suitable for any other set of matrices that is ordered in a similar way (see examples/AR2.jl).","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"perms\nautomaton_constructor","category":"page"},{"location":"cksvar/#ThresholdStability.perms","page":"CKSVAR","title":"ThresholdStability.perms","text":"perms(p)\n\nGenerates a vector of all sequences of length p made up of elements -1 or 1.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#ThresholdStability.automaton_constructor","page":"CKSVAR","title":"ThresholdStability.automaton_constructor","text":"automaton_constructor(Σ::AbstractVector{<:AbstractMatrix})\n\nGenerates an automaton tracking admissible transitions between states. Σ is a vector of matrices corresponding to a TAR model, assuming a default order generated by perms.\n\nautomaton_constructor(Σ::AbstractVector{<:AbstractMatrix}, seqlist)\n\nGenerates an automaton tracking admissible transitions between states given a custom list of regime sequences.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"Automata can also be constructed manually using HybridSystems.jl, which ThresholdStability re-exports.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"For example, the following code constructs an automaton with three states, loops at states 1 and 3, and edges from states 1 to 2, 2 to 3, and 3 to 1, with the tail node indices as labels.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"using ThresholdStability\n\nG = LightAutomaton(3)  # initializes automaton with 3 states as an edgeless graph\nadd_transition!(G, 1, 1, 1)\nadd_transition!(G, 1, 2, 1)  # adds edge from state 1 to 2, with label 1\nadd_transition!(G, 2, 3, 2)\nadd_transition!(G, 3, 3, 3)\nadd_transition!(G, 3, 1, 3)\nG\n\n# output\n\nLightAutomaton{LightGraphs.SimpleGraphs.SimpleDiGraph{Int64}, LightGraphs.SimpleGraphs.SimpleEdge{Int64}}({3, 5} directed simple Int64 graph, Dict{LightGraphs.SimpleGraphs.SimpleEdge{Int64}, Dict{Int64, Int64}}(Edge 1 => 2 => Dict(2 => 1), Edge 3 => 1 => Dict(5 => 3), Edge 1 => 1 => Dict(1 => 1), Edge 3 => 3 => Dict(4 => 3), Edge 2 => 3 => Dict(3 => 2)), 5, 5)","category":"page"},{"location":"stability/#Stability","page":"Stability","title":"Stability","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ThresholdStability","category":"page"},{"location":"#ThresholdStability","page":"Home","title":"ThresholdStability","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ThresholdStability.jl is a package implementing techniques to determine the stability of discrete-time threshold vector autoregressive (TVAR) models.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"cksvar.md\", \"stability.md\"]\nDepth = 2","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
