var documenterSearchIndex = {"docs":
[{"location":"cksvar/#CKSVAR-models","page":"CKSVAR","title":"CKSVAR models","text":"","category":"section"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"ThresholdStability.jl includes tools to convert censored and kinked structural vector autoregressive (CKSVAR) models into TVAR models. Information on CKSVAR models is available in Mavroeidis (2021).","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"Ox code to estimate CKSVAR models is available here.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"CKSVAR_to_TAR\nCKSVAR_to_companion\nCKSVAR_to_companionFD","category":"page"},{"location":"cksvar/#ThresholdStability.CKSVAR_to_TAR","page":"CKSVAR","title":"ThresholdStability.CKSVAR_to_TAR","text":"CKSVAR_to_TAR(C, Cstar, βtilde, nlags)\n\nReturns pair (Σ, X) where Σ is a set of matrices corresponding to the CKSVAR model (with censored variable in levels) in TVAR form, and X is a set encoding state-space constraints.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#ThresholdStability.CKSVAR_to_companion","page":"CKSVAR","title":"ThresholdStability.CKSVAR_to_companion","text":"CKSVAR_to_companion(C, Cstar, βtilde, nlags)\n\nConverts CKSVAR model (with censored variable in levels) into companion form.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#ThresholdStability.CKSVAR_to_companionFD","page":"CKSVAR","title":"ThresholdStability.CKSVAR_to_companionFD","text":"CKSVAR_to_companionFD(F, Fstar, βtilde, nlags; diff=true)\n\nConverts CKSVAR model estimated with the censored variable entering in first differences into companion form. The default setting diff=true returns the companion form with the censored variable entering in first differences. To retrieve the companion form with censored variable entering in levels, set diff=false.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#Construction-of-automata","page":"CKSVAR","title":"Construction of automata","text":"","category":"section"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"CKSVAR_to_TAR outputs a set of matrices generated in an order generated by the perms function (as well as a set encoding state space constraints.)","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"automaton_constructor provides a method to construct an automaton suitable for use with a CKSVAR model converted using CKSVAR_to_TAR, assuming this order. It is also suitable for any other set of matrices that is ordered in a similar way (see examples/AR2.jl).","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"perms\nautomaton_constructor","category":"page"},{"location":"cksvar/#ThresholdStability.perms","page":"CKSVAR","title":"ThresholdStability.perms","text":"perms(p)\n\nGenerates a vector of all sequences of length p made up of elements -1 or 1.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/#ThresholdStability.automaton_constructor","page":"CKSVAR","title":"ThresholdStability.automaton_constructor","text":"automaton_constructor(Σ::AbstractVector{<:AbstractMatrix})\n\nGenerates an automaton tracking admissible transitions between states. Σ is a vector of matrices corresponding to a TAR model, assuming a default order generated by perms.\n\nautomaton_constructor(Σ::AbstractVector{<:AbstractMatrix}, seqlist)\n\nGenerates an automaton tracking admissible transitions between states given a custom list of regime sequences.\n\n\n\n\n\n","category":"function"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"Automata can also be constructed manually using HybridSystems.jl, which ThresholdStability re-exports.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"For example, the following code constructs an automaton with three states, loops at states 1 and 3, and edges from states 1 to 2, 2 to 3, and 3 to 1, with the tail node indices as labels.","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"using ThresholdStability\n\nG = LightAutomaton(3)  # initializes automaton with 3 states as an edgeless graph\nadd_transition!(G, 1, 1, 1)\nadd_transition!(G, 1, 2, 1)  # adds edge from state 1 to 2, with label 1\nadd_transition!(G, 2, 3, 2)\nadd_transition!(G, 3, 3, 3)\nadd_transition!(G, 3, 1, 3)\nG\n\n# output\n\nLightAutomaton{LightGraphs.SimpleGraphs.SimpleDiGraph{Int64}, LightGraphs.SimpleGraphs.SimpleEdge{Int64}}({3, 5} directed simple Int64 graph, Dict{LightGraphs.SimpleGraphs.SimpleEdge{Int64}, Dict{Int64, Int64}}(Edge 1 => 2 => Dict(2 => 1), Edge 3 => 1 => Dict(5 => 3), Edge 1 => 1 => Dict(1 => 1), Edge 3 => 3 => Dict(4 => 3), Edge 2 => 3 => Dict(3 => 2)), 5, 5)","category":"page"},{"location":"cksvar/#Indicator-function","page":"CKSVAR","title":"Indicator function","text":"","category":"section"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"indicator can be used in building functions to convert models to TVAR form. Examples: AR(2). ","category":"page"},{"location":"cksvar/","page":"CKSVAR","title":"CKSVAR","text":"indicator","category":"page"},{"location":"cksvar/#ThresholdStability.indicator","page":"CKSVAR","title":"ThresholdStability.indicator","text":"indicator(y, b; indregion=:above, ineq=:nonstrict)\n\nIndicator variable of default form 1y  b. The inequality can be made strict and the direction of inequality can be reversed.\n\nArguments\n\nineq=:nonstrict (default):  calculates 1y  b or 1y  b.\nineq=:strict: calculates 1y  b or 1y  b.\nindregion=:above (default): calculates 1y  b or 1y  b.\nindregion=:below: calculates 1y  b or 1y  b.\n\n\n\n\n\n","category":"function"},{"location":"stability/#Stability","page":"Stability","title":"Stability","text":"","category":"section"},{"location":"stability/#Motivation","page":"Stability","title":"Motivation","text":"","category":"section"},{"location":"stability/","page":"Stability","title":"Stability","text":"Let mathscrX_sigma_sigma=1^m be a partition of state space mathscrXsubseteqmathbbR^p s.t. each mathscrX_sigma takes the form of a convex polyhedron, ```math \\mathscr{X}\\sigma={x\\in\\mathbb{R}^p\\mid E\\sigma x\\geq* 0, D\\sigma x=0},","category":"page"},{"location":"stability/","page":"Stability","title":"Stability","text":"where the inequality ``\\geq_*`` may be strict or weak.\n\nThe tools in [ThresholdStability.jl](https://github.com/samwycherley/ThresholdStability.jl) are intended to determine whether a discrete-time model of form ```math\n\\begin{align}x_{t+1}&=\\Phi(x_t)x_t\\\\\n&:=\\sum_{\\sigma=1}^mA_\\sigma\\mathbf{1}\\{x_t\\in\\mathscr{X}_\\sigma\\}x_t\\end{align}","category":"page"},{"location":"stability/","page":"Stability","title":"Stability","text":"is asymptotically stable, where mathbf1xinmathscrX_sigma is an indicator function and A_sigma are given ptimes p matrices.","category":"page"},{"location":"stability/","page":"Stability","title":"Stability","text":"Sufficient conditions for asymptotic stability, in descending order of conservativeness, are that","category":"page"},{"location":"stability/","page":"Stability","title":"Stability","text":"the joint spectral radius (JSR) of the set Sigma=A_1dotsA_m is strictly less than 1;\nthe constrained joint spectral radius (CJSR) of the constrained switched linear system (Sigma G), where G is an automaton describing the possible transitions between states, is strictly less than 1;\nthe 'state-constrained joint spectral radius' (SCJSR) of the state-dependent switched linear system (Sigma G mathscrX_sigma) is strictly less than 1.","category":"page"},{"location":"stability/","page":"Stability","title":"Stability","text":"In general, exact computation of the JSR, CJSR and SCJSR are NP-hard, but can be efficiently approximated via semidefinite programming or sum-of-squares programming (see e.g. Parillo and Jadabaie, 2008).","category":"page"},{"location":"stability/#JSR-and-CJSR","page":"Stability","title":"JSR and CJSR","text":"","category":"section"},{"location":"stability/","page":"Stability","title":"Stability","text":"We provide functions to compute tight upper bounds on the JSR and CJSR and to compute the spectral radius of individual matrices, each based on utilities from SwitchOnSafety.jl.","category":"page"},{"location":"stability/","page":"Stability","title":"Stability","text":"spectral_radius\njsr\ncjsr","category":"page"},{"location":"stability/#ThresholdStability.spectral_radius","page":"Stability","title":"ThresholdStability.spectral_radius","text":"spectral_radius(A::AbstractMatrix)\n\nCalculates the spectral radius of matrix A.\n\n\n\n\n\n","category":"function"},{"location":"stability/#ThresholdStability.jsr","page":"Stability","title":"ThresholdStability.jsr","text":"jsr(Σ::AbstractVector{<:AbstractMatrix}; d = 2)\n\nCalculates an upper bound on the joint spectral radius of a set of matrices Σ.\n\njsr(s::AbstractSwitchedSystem; d = 2)\n\nCalculates an upper bound on the joint spectral radius for the switched linear system s.\n\n\n\n\n\n","category":"function"},{"location":"stability/","page":"Stability","title":"Stability","text":"The jsr function applied to a state-dependent switched system (\\Sigma, G, X) or a constrained switched system (\\Sigma, G) ignores the state-space constraints and automaton and reports the JSR of \\Sigma. Likewise, the cjsr function applied to a state-dependent switched system ignores the state-space constraints.","category":"page"},{"location":"stability/#SCJSR","page":"Stability","title":"SCJSR","text":"","category":"section"},{"location":"stability/","page":"Stability","title":"Stability","text":"sosbound_γ\nsosbound_gamma\nsdpbound_γ\nsdpbound_gamma","category":"page"},{"location":"stability/#ThresholdStability.sosbound_γ","page":"Stability","title":"ThresholdStability.sosbound_γ","text":"sosbound_γ(s::StateDepDiscreteSwitchedLinearSystem, d)\n\nCompute minimum value of γ for which the sum-of-squares program is feasible.\n\nKeywords\n\noptimizer=...: choose an SDP solver. The default solver is CSDP.\ntol=...: set tolerance. The default is tol=1e-5.\nverbose=...: set level of detail reported during calculation process. The default is verbose=0.\ninitstep=...: set initial step size. The default value is initstep=1.1.\n\n\n\n\n\n","category":"function"},{"location":"stability/#ThresholdStability.sosbound_gamma","page":"Stability","title":"ThresholdStability.sosbound_gamma","text":"sosbound_gamma(s::StateDepDiscreteSwitchedLinearSystem, d; optimizer=nothing, tol=1e-5, verbose=0, initstep=1.1)\n\nAlias for sosbound_γ.\n\n\n\n\n\n","category":"function"},{"location":"stability/#ThresholdStability.sdpbound_γ","page":"Stability","title":"ThresholdStability.sdpbound_γ","text":"sdpbound_γ(s::StateDepDiscreteSwitchedLinearSystem)\n\nCompute minimum value of gamma for which the SDP is feasible.\n\nFor keywords, see sosbound_γ\n\n\n\n\n\n","category":"function"},{"location":"stability/#ThresholdStability.sdpbound_gamma","page":"Stability","title":"ThresholdStability.sdpbound_gamma","text":"sdpbound_gamma(s::StateDepDiscreteSwitchedLinearSystem; optimizer=nothing, tol=1e-5, verbose=0, initstep=1.1)\n\nAlias for bound_γ.\n\n\n\n\n\n","category":"function"},{"location":"stability/#SCJSR-calculation","page":"Stability","title":"SCJSR calculation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ThresholdStability","category":"page"},{"location":"#ThresholdStability","page":"Home","title":"ThresholdStability","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ThresholdStability.jl is a package implementing techniques to determine the stability of discrete-time threshold vector autoregressive (TVAR) models.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"cksvar.md\", \"stability.md\"]\nDepth = 2","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
